#!groovyâ€‹
def branch = 'master'
//dataset
def noobaa_ip = '52.183.88.20'
def values = noobaa_ip.tokenize('.')
def prefix = values[2]+'-'+values[3]
def dataset_size = '10240' // 10GB of dataset
def aging_time = '300' // run for 5 hours
//machinekiller
def start_killing_time = '30' // start killing after 30 minutes
def service = 'azure'
def resource = 'pipeline-dataset'
def zone = 'westus2'
def min_machines = '5' // minimum 3 machine
def max_machines = '15' // maximum 10 machines
//agentMatrix
def azureName = 'agent-matrix-server'
def serverName = '52.183.88.148'
def agentConf = 'eyJhZGRyZXNzIjoid3NzOi8vMTAuMC4wLjQ6ODQ0MyIsInN5c3RlbSI6ImRlbW8iLCJyb290X3BhdGgiOiIuL2FnZW50X3N0b3JhZ2UvIiwiY3JlYXRlX25vZGVfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDS' +
                'jkuZXlKaFkyTnZkVzUwWDJsa0lqb2lOVGhoTkRJNFpHUmhNalJoTWpjMk9EQTNOVFJqWTJReElpd2ljM2x6ZEdWdFgybGtJam9pTlRoaE5ESTRaR1JoTWpSaE1qYzJPREEzTlRSalkyUXlJaXdpY205c1pTSTZJbU55WldGMFpWOXViMlJsSW' + 
                'l3aVpYaDBjbUVpT25zaVlXZGxiblJmWTI5dVptbG5YMmxrSWpvaU5UaGxOakE1T0RZeU9EUTJNRGN6TWpjMFpEWTBaVE5pSW4wc0ltbGhkQ0k2TVRRNU1UUTNNRGN5Tm4wLkRibGtwY3R2ZlBhc2M0NnMyWmw4Y256enlvYzIxcGp0ZXZqcnZHRDJKNTAifQ=='
def agentsResource = 'pipeline-agents'
def agentsVnet = 'agents-vnet'
def agentsStorage = 'jenkinsnoobaastorage'
def serverImage = 'https://jenkinsnoobaastorage.blob.core.windows.net/vhd-images/NooBaa-1.0.0-demo.vhd'
//systemConfig
def nodeLocalIP = '10.0.0.21'
def serverLocalIP = '10.0.0.5'


node('jenkins-slave1-centos') {
    stage('Get code from GIT') {
        echo 'Checkouting from git!'
        checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '7df4e257-eb85-4243-9dc3-568d6127f752', url: 'https://tamireran@github.com/noobaa/noobaa-core']]])
    }
    stage('Installing NPM packages') {
        echo 'Installing all needed npm packages!'
        sh script: """
              export NVM_DIR=/usr/local/nvm
              . /opt/nvm/nvm.sh
              nvm install 6.9.5
              nvm use 6.9.5
              cd $WORKSPACE
              npm install
              npm install azure cloud-cd
        """
        // npm install bluebird lodash winston setimmediate aws-sdk minimist azure dotenv googleapis request moment performance-now ws ip
    }
    stage('Upgrading noobaa server') {
      echo 'Upgrading machines to latest version!'
      sh script: """
              export NVM_DIR=/usr/local/nvm
              . /opt/nvm/nvm.sh
              curl -u jackyalbo:711d9303458d34ad56c1a48716c02ee5e286570f -L $JENKINS_URL/job/mdserver/lastSuccessfulBuild/artifact/*zip*/archive.zip >/tmp/noobaa-NVA-latest.zip
              # cp -R /root/node_modules/noobaa-core/build $WORKSPACE
              # cp -R /root/node_modules/noobaa-core/node_modules $WORKSPACE/
              fname=\$(unzip -o /tmp/noobaa-NVA-latest.zip -d  /tmp/|grep "tar.gz"|awk '{ print \$2 }')
              node $WORKSPACE/src/test/system_tests/upgradeonly.js --upgrade_pack \$fname --target_ip $noobaa_ip
              node $WORKSPACE/src/deploy/azureSnapshots.js --resource $agentsResource --source $azureName --image $serverImage
              sleep 1m
              node $WORKSPACE/src/test/system_tests/upgradeonly.js --upgrade_pack \$fname --target_ip $serverName
              node $WORKSPACE/src/test/system_tests/upgradeonly.js --upgrade_pack \$fname --target_ip $serverLocalIP
      """
    }
    stage('Tests') {
      // Run the maven build
      parallel (
          "dataset": {
            echo 'Running some dataset!'
            sh script: """
                export NVM_DIR=/usr/local/nvm
                . /opt/nvm/nvm.sh
                node $WORKSPACE/src/test/qa/dataset.js --server '${noobaa_ip}' --aging_timeout '${aging_time}' --dataset_size '${dataset_size}'
            """
          },
          "machinekill": {
            echo 'Killing some nodes!'
            sh script: """
                export NVM_DIR=/usr/local/nvm
                . /opt/nvm/nvm.sh
                sleep '${start_killing_time}'m
                node $WORKSPACE/src/test/qa/machine_killer.js --service '${service}' --project '${resource}' --zone '${zone}' --prefix '${prefix}' --timeout \$((${aging_time}-${start_killing_time})) --min_machines '${min_machines}' --max_machines '${max_machines}'
            """
          },
          "agents-matrix": {
            echo 'Adding some agents!'
            sh script: """
                export NVM_DIR=/usr/local/nvm
                . /opt/nvm/nvm.sh
                node $WORKSPACE/src/test/qa/agents_matrix.js --azure_name '${azureName}' --server_ip '${serverName}' --resource '${agentsResource}' --vnet '${agentsVnet}' --storage '${agentsStorage}' --upgrade_pack \$fname
            """
          },
          "system-configurations": {
            echo 'Adding some system configurations!'
            sh script: """
                export NVM_DIR=/usr/local/nvm
                . /opt/nvm/nvm.sh
                node $WORKSPACE/src/test/qa/system_config.js --server_ip '${serverLocalIP}' --my_ip '${nodeLocalIP}'
            """
          },
          "upgrades": {
            echo 'Doing some upgrades!'
            sh script: """
                export NVM_DIR=/usr/local/nvm
                . /opt/nvm/nvm.sh
                node $WORKSPACE/src/test/qa/upgrade_test.js
            """
          },
          "cluster": {
            echo 'Doing some clusterisation!'
            sh script: """
                export NVM_DIR=/usr/local/nvm
                . /opt/nvm/nvm.sh
                fname=\$(unzip -o /tmp/noobaa-NVA-latest.zip -d  /tmp/|grep "tar.gz"|awk '{ print \$2 }')
                node $WORKSPACE/src/test/qa/cluster_test.js --servers 3 --upgrade_pack \$fname --timeout '${aging_time}' --storage '${agentsStorage}' --resource '${agentsResource}' --vnet '${agentsVnet}' --breakonerror
            """
          }
      )
   }
}
