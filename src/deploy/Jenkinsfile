#!groovyâ€‹
def branch = 'master'
//defining env variables
def resource = 'jenkins-7-pipeline'
def vnet = 'jenkins-7-pipeline-vnet'
def storage = 'jenkinspipeline7'
def vm_size = 'B'
def azureEnv = " --resource ${resource} --vnet ${vnet} --storage ${storage} --vm_size ${vm_size}"
//dataset
def dataset_ip = '52.151.45.46'
def dataset_size = '51200' //MB
def aging_time = '300' //min

node('pipeline') {
	def buildResult = "SUCCESS"
	try {
		stage('Get code from GIT') {
			echo 'node name: pipeline, ip: 40.65.104.56'
			echo 'Checkouting from git!'
			checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '22686b32-d2c1-4a6f-9248-d89614dd8a3f', url: 'git@github.com:noobaa/noobaa-core.git']]])
		}
		stage('Preparing environment') {
		    sh script: """
                yes | cp /usr/local/noobaa/.env $WORKSPACE/
            """
			echo 'Installing all needed npm packages!'
			sh script: """
			export NVM_DIR=/opt/nvm
			. /opt/nvm/nvm.sh
			nodever=\$(node -v) 
			noderc=\$(cat $WORKSPACE/.nvmrc)
			if [ \${nodever//v/} != \${noderc} ]
			then
				nvm install \${noderc}
			 	nvm alias default \${noderc}
			 	nvm use default
			fi
			 cd $WORKSPACE
			 npm install
			 #npm install azure cloud-cd
			 #npm install minimist
			 nvm --version
			 node -v
			 npm -v
			 """
            echo 'Deleting log file'
            sh script: """
            rm -rf $WORKSPACE/logs/noobaa.log
            """
            echo 'Getting last successful package build'
            sh script: """
            curl -u jackyalbo:711d9303458d34ad56c1a48716c02ee5e286570f -L $JENKINS_URL/job/Build/job/Build-Package-Master/lastSuccessfulBuild/api/xml >/tmp/lastSuccessfulBuild.xml
            buildPath=\$(cat /tmp/lastSuccessfulBuild.xml | awk -F "<relativePath>" '{print \$2}' | awk -F "</relativePath>" '{print \$1}' | xargs)
            curl -u jackyalbo:711d9303458d34ad56c1a48716c02ee5e286570f -L $JENKINS_URL/job/Test/job/Test-Pipeline/api/xml >/tmp/pipeline.xml
            curl -u jackyalbo:711d9303458d34ad56c1a48716c02ee5e286570f -L $JENKINS_URL/job/Build/job/Build-Package-Master/lastSuccessfulBuild/artifact/\${buildPath} >/tmp/noobaa-NVA-latest.tar.gz
            tar -zxvf /tmp/noobaa-NVA-latest.tar.gz -C /tmp/
            cp -r /tmp/noobaa-core/src $WORKSPACE/
            """
		}
        stage('Setting env file agents rg') {
            sh script: """
            rm .env
            cp /noobaaFiles/.env .env
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)
            echo "pipeline build number: \${id}"
            """
        }
		stage('Tests') {
		parallel (  
        "account_test": {
            echo 'Running account tests!'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)1
            flags="${azureEnv} --name account --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/account_test.js
            """
            echo 'Deleting account env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)1
            flags="${azureEnv} --name account --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        "namespace": {
            echo 'Loading data to namespace resources!'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)2
            flags="${azureEnv} --name namespace --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/namespace_test.js
            """
            echo 'Deleting namespace env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)2
            flags="${azureEnv} --name namespace --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        "replica_test": {
            echo 'Uploading data with switching off agents and checking files chunks and parts'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)3
            flags="${azureEnv} --name replica --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/rebuild_replicas_test.js --failed_agents_number 2 --agents_number 10
            """
            echo 'Deleting replica env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)3
            flags="${azureEnv} --name replica --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        "data_availability": {
            echo 'Uploading data with switching off agents and checking files'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)4
            flags="${azureEnv} --name dataAvailability --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/data_availability_test.js --iterationsNumber 2 --failed_agents_number 1 --agents_number 6
            """
            echo 'Deleting data_availability env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)4
            flags="${azureEnv} --name dataAvailability --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
		"spillover": {
            echo 'Uploading data on spillover, add agents, upload over pool resources size'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)5
            flags="${azureEnv} --name spillover --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/spillover_test.js
            """
            echo 'Deleting spillover env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)5
            flags="${azureEnv} --name spillover --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        //TODO: need to get the internal ip of the server and run into it.
        // "dataset": {
        //     echo 'Running dataset'
        //     sh script: """
        //     export NVM_DIR=/opt/nvm
        //     . /opt/nvm/nvm.sh &> /dev/null
        //     id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)6
        //     flags="${azureEnv} --name dataset --id \${id} "
        //     node src/test/framework/test_env_builder.js \
        //         \${flags} \
        //         --upgrade /tmp/noobaa-NVA-latest.tar.gz \
        //         --js_script $WORKSPACE/src/test/qa/dataset.js --server ${dataset_ip} --aging_timeout 1 --dataset_size 1024
        //     """
        //     echo 'Deleting agent_matrix env'
        //     sh script: """
        //     id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)6
        //     flags="${azureEnv} --name dataset --id \${id} "
        //     node src/test/framework/test_env_builder.js \
        //         \${flags} \
        //         --clean_only
        //     """
        // },
        "agents_matrix": {
            echo 'Running agent_matrix'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)7
            flags="${azureEnv} --name agentsMatrix --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/agents_matrix.js 
            """
            echo 'Deleting agent_matrix env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)7
            flags="${azureEnv} --name agentsMatrix --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        "Upgrade": {
            echo 'Running Upgrad test'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)8
            flags="${azureEnv} --name upgrade --id \${id}" 
            node src/test/qa/two_step_upgrade_test.js \
                \${flags} \
                --upgrade_package /tmp/noobaa-NVA-latest.tar.gz 
            """
        },
        "cluster test": {
            echo 'Running cluster_test'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)9
            flags="${azureEnv} --name cluster --id \${id}"
            node src/test/qa/cluster_test.js \
                \${flags} \
                --upgrade_pack /tmp/noobaa-NVA-latest.tar.gz 
            """
            echo 'Deleting cluster_test env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)9
            flags="${azureEnv} --name cluster --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        "TUI": {
            echo 'Running test_TUI'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)10
            flags="${azureEnv} --name TUI --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/test-TUI.js
            """
            echo 'Deleting test_TUI env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)10
            flags="${azureEnv} --name TUI --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        },
        "System config": {
            echo 'Running System config'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh &> /dev/null
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)11
            flags="${azureEnv} --name SystemConfig --id \${id} --skip_agent_creation"
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --upgrade /tmp/noobaa-NVA-latest.tar.gz \
                --js_script $WORKSPACE/src/test/qa/system_config.js
            """
            echo 'Deleting System config env'
            sh script: """
            id=\$(cat /tmp/pipeline.xml | awk -F "<number>" '{print \$2}' | awk -F "</number>" '{print \$1}' | tail -1)11
            flags="${azureEnv} --name SystemConfig --id \${id} "
            node src/test/framework/test_env_builder.js \
                \${flags} \
                --clean_only
            """
        }
        )}
	} catch (e) {
		buildResult = "FAILED"
        echo 'build failed with error ' + e
        throw e
	} finally {
            echo 'Deleting all the tmp files'
            sh script: """
            rm -rf /tmp/lastSuccessfulBuild.xml
            rm -rf /tmp/noobaa-NVA-latest.tar.gz
            rm -rf /tmp/pipeline.xml
            rm -rf /tmp/noobaa-core/
            """
			def subject = "Job '${JOB_NAME}' (${BUILD_NUMBER}) version is " + buildResult
			def appLog = readFile("${WORKSPACE}/logs/noobaa.log")
			def details = "Please go to ${BUILD_URL} and verify the build. noobaa logs: " + appLog
			mail subject: subject,
			body: details,
			to:  'liran.mauda@noobaa.com, nimrod.becker@noobaa.com'
	}
}