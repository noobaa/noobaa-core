#!groovyâ€‹
def branch = 'master'
//dataset
def dataset_ip = '52.151.45.46'
def noobaa_server = 'datasetpipeline.westus2.cloudapp.azure.com'
def dataset_size = '51200' //MB
def aging_time = '300' //min
//machinekiller
def start_killing_time = '30' // start killing after 30 minutes
def service = 'azure'
def resource = 'pipeline-dataset'
def zone = 'westus2'
def prefix = 'qa-dataset-agent'
def min_machines = '0' // minimum 3 machine
def max_machines = '3' // maximum 10 machines
//cluster
def clusterResource = 'pipelie-cluster'
def clusterVnet = 'pipelie-cluster-vnet'
def clusterStorage = 'pipelieclusterdisks'
//agentMatrix
def azureName = 'agentMatrix0'
def serverName = 'agentmatrix.westus2.cloudapp.azure.com'
def serverIP = '52.183.97.185'
def agentsResource = 'pipeline-agents'
def agentsVnet = 'pipeline-agents-vnet'
def agentsStorage = 'pipelineagentsdisks'
//systemConfig
def nodeLocalIP = '10.1.12.0'
def serverLocalIP = '52.191.139.47'
def severExternalIP = '52.191.139.47'
//agent rg
def data_ip = '52.151.56.24'
def ip = '40.65.102.142'
def ip_spillover = '52.151.62.82'

node('pipeline') {
	def buildResult = "SUCCESS"
	try {
		stage('Get code from GIT') {
			echo 'node name: pipeline, ip: 52.183.114.248'
			echo 'Checkouting from git!'
			checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '22686b32-d2c1-4a6f-9248-d89614dd8a3f', url: 'git@github.com:noobaa/noobaa-core.git']]])
		}
		stage('Preparing environment') {
		    sh script: """
                yes | cp /usr/local/noobaa/.env $WORKSPACE/
            """
			echo 'Installing all needed npm packages!'
			sh script: """
			export NVM_DIR=/opt/nvm
			. /opt/nvm/nvm.sh
			 #nvm install 8
			 #nvm alias default 8
			 #nvm use default
			 #cd $WORKSPACE
			 #npm install
			 #npm install azure cloud-cd
			 #npm install minimist
			 nvm --version
			 node -v
			 npm -v
			 """
			 echo 'Deleting log file'
			 sh script: """
			 rm -rf $WORKSPACE/logs/noobaa.log
			 """
            //    echo 'Getting last successful package build'
            //    sh script: """
            //    curl -u jackyalbo:711d9303458d34ad56c1a48716c02ee5e286570f -L $JENKINS_URL/Build/job/Build-Package/lastSuccessfulBuild/api/xml >/tmp/lastSuccessfulBuild.xml
            //    isMaster=\$(cat /tmp/lastSuccessfulBuild.xml | awk -F "<displayName>" '{print \$2}' | awk -F "</displayName>" '{print \$1}')
             //        if [[ "\${isMaster}" =~ "master" ]]
             //        then
             //        curl -u jackyalbo:711d9303458d34ad56c1a48716c02ee5e286570f -L $JENKINS_URL/Build/job/Build-Package/lastSuccessfulBuild/artifact/*zip*/archive.zip >/tmp/noobaa-NVA-latest.zip
             //    """
		}
        stage('Setting env file agents rg') {
            sh script: """
            rm .env
            touch .env
            echo 'AZURE_SUBSCRIPTION_ID=a3556050-2d88-42a4-a4e3-f0a2087edc60' >> .env
            echo 'DOMAIN=noobaa.com' >> .env
            echo 'APPLICATION_SECRET=JRqvAUh95fF+3aBaz0SJcB21ocTO8+MCtjJ7adg9fhE=' >> .env
            echo 'AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=pipelineagentsdisks;AccountKey=p9Ed8m+87P5ZwcOcvXqfvCJ9NExeZBRutsDdSCkXU2JKj9wPIV60e1yYaZ4UIKuSLvedMhVS2dSKUtDYSbujKQ==;EndpointSuffix=core.windows.net"' >> .env
            echo 'CLIENT_ID=199522b3-407d-45eb-b7fb-023d21ab6406' >> .env
            """
        }
		stage('Tests') {
		parallel (
		"account_test": {
            echo 'Doing account tests!'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh
            node $WORKSPACE/src/test/qa/account_test.js --server_ip '${ip}' --system_ip '${ip}'
            """
		},
        "namespace": {
            echo 'Loading data to namespace resources!'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh
            node $WORKSPACE/src/test/qa/namespace_test.js --server_ip '${ip}'
            """
        },
        "replica_test": {
            echo 'Uploading data with switching off agents and checking files chunks and parts'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh
            node $WORKSPACE/src/test/qa/rebuild_replicas_test.js --resource '${agentsResource}' --vnet '${agentsVnet}' --storage '${agentsStorage}' --server_ip '${ip}' --failed_agents_number 2 --agents_number 10
            """
        },
        "data_availability": {
            echo 'Uploading data with switching off agents and checking files'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh
            node $WORKSPACE/src/test/qa/data_availability_test.js --resource '${agentsResource}' --vnet '${agentsVnet}' --storage '${agentsStorage}' --server_ip '${data_ip}' --iterationsNumber 2 --failed_agents_number 1 --agents_number 6
            """
        },
		"spillover": {
            echo 'Uploading data on spillover, add agents, upload over pool resources size'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh
            node $WORKSPACE/src/test/qa/spillover_test.js --resource '${agentsResource}' --vnet '${agentsVnet}' --storage '${agentsStorage}' --server_ip '${ip_spillover}'
            """
        },
        "dataset": {
            echo 'Doing clean ova and set system config'
            sh script: """
            export NVM_DIR=/opt/nvm
            . /opt/nvm/nvm.sh
            node $WORKSPACE/src/test/qa/dataset.js --server '${dataset_ip}' --aging_timeout 1 --dataset_size 1024
            """
        }
		)}
	} catch (e) {
		buildResult = "FAILED"
        echo 'build failed with error ' + e
        throw e
	} finally {
			def subject = "Job '${JOB_NAME}' (${BUILD_NUMBER}) version is " + buildResult
			def appLog = readFile("${WORKSPACE}/logs/noobaa.log")
			def details = "Please go to ${BUILD_URL} and verify the build. noobaa logs: " + appLog
			mail subject: subject,
			body: details,
			to:  'yuliia.kovalenko@noobaa.com, liran.mauda@noobaa.com, nimrod.becker@noobaa.com'
	}
}
