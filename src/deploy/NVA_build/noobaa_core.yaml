kind: Secret
apiVersion: v1
metadata:
  name: noobaaimages.azurecr.io  
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJub29iYWFpbWFnZXMuYXp1cmVjci5pbyI6eyJ1c2VybmFtZSI6ImJkOTFiYjVjLTE4MTUtNGE4OC1iOWY3LTk1NWY1MWI1YTE0MyIsInBhc3N3b3JkIjoiMDhlOTJkZTAtZTk3YS00NjE4LWE1NTgtNDQ4YzA0MzlkMjk4IiwiZW1haWwiOiJlcmFuLnRhbWlyQG5vb2JhYS5jb20iLCJhdXRoIjoiWW1RNU1XSmlOV010TVRneE5TMDBZVGc0TFdJNVpqY3RPVFUxWmpVeFlqVmhNVFF6T2pBNFpUa3laR1V3TFdVNU4yRXRORFl4T0MxaE5UVTRMVFEwT0dNd05ETTVaREk1T0E9PSJ9fX0=
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: noobaa-account
spec:
  imagePullSecrets:
    - name: noobaaimages.azurecr.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  creationTimestamp: null
  name: noobaa-role
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - events
      - configmaps
      - secrets
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - apps
    resources:
      - deployments
      - daemonsets
      - replicasets
      - statefulsets
    verbs:
      - "*"
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
    verbs:
      - get
      - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: noobaa-role-binding
subjects:
  - kind: ServiceAccount
    name: noobaa-account
roleRef:
  kind: Role
  name: noobaa-role
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: s3
  labels:
    app: noobaa-server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/scheme: http
    prometheus.io/port: "8080"
spec:
  # LoadBalancer service will alocate an external ip automatically on public cloud providers (aws\azure\gcp, etc.)
  # for on premise kuberenets clusters there are 3rd party solutions that provide the same functionality. e.g: metalLB (https://metallb.universe.tf)
  # metalLB installs a controller in the cluster that handles LoadBalancer services and allocates an external ip
  # without a controller handling LoadBalancer service, it will be handled as a NodePort (can be accessed through the node ip and a random port allocated by kubernetes)
  type: LoadBalancer
  ports:
    - port: 80
      name: s3
    - port: 443
      name: s3-https
    - port: 8080
      name: mng
    - port: 8443
      name: mng-https
  selector:
    app: noobaa-server    
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: noobaa-server
spec:
  selector:
    matchLabels:
      app: noobaa-server
  serviceName: s3
  replicas: 1
  template:
    metadata:
      labels:
        app: noobaa-server
    spec:
      containers:
        - name: noobaa-server
          image: noobaaimages.azurecr.io/noobaa/nbserver
          resources:
            # https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "4"
              memory: "8Gi"
          ports:
            - containerPort: 80
            - containerPort: 443
            - containerPort: 8080
            - containerPort: 8443
            - containerPort: 8444
            - containerPort: 60100
            - containerPort: 60101
            - containerPort: 60102
            - containerPort: 60103
            - containerPort: 60104
            - containerPort: 60105
          volumeMounts:
            - mountPath: /run
              name: run-volume
            - mountPath: /run/lock
              name: run-lock-volume
            - mountPath: /data
              name: datadir
            - mountPath: /log
              name: logdir
          env:
            - name: CONTAINER_PLATFORM
              value: KUBERNETES
      volumes:
        - name: run-volume
          emptyDir: { medium: "Memory" }
        - name: run-lock-volume
          emptyDir: { medium: "Memory" }
      serviceAccountName: noobaa-account
      imagePullSecrets:
        - name: noobaaimages.azurecr.io

  volumeClaimTemplates:
    # this will provision a dynamic persistent volume (volume is automatically provisioned by a provisioner)
    # in minikube it is provisioned as hostPath volume under hosts /tmp which is not persistent between
    # minkube restarts. if we want it to be persistent between restarts we need to statically provision a
    # volume according to this https://kubernetes.io/docs/setup/minikube/#persistent-volumes
    - metadata:
        name: logdir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: datadir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 50Gi
