apiVersion: v1
kind: Service
metadata:
  name: noobaa-services
  labels:
    app: noobaa
spec:
# LoadBalancer service will alocate an external ip automatically on public cloud providers (aws\azure\gcp, etc.)
# for on premise kuberenets clusters there are 3rd party solutions that provide the same functionality. e.g: metalLB (https://metallb.universe.tf)
# metalLB installs a controller in the cluster that handles LoadBalancer services and allocates an external ip
# without a controller handling LoadBalancer service, it will be handled as a NodePort (can be accessed through the node ip and a random port allocated by kubernetes)
  type: LoadBalancer
  ports:
  - port: 80
    name: s3
  - port: 443
    name: s3-https
  - port: 8080
    name: mng
  selector:
    app: noobaa
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: noobaa
spec:
  serviceName: noobaa-services
  replicas: 1
  template:
    metadata:
      labels:
        app: noobaa
    spec:
      containers:
      - name: noobaa
        securityContext: 
          capabilities: {}
          privileged: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "1"
          limits:
            memory: "8Gi"
            cpu: "4"
        # change image location before running
        # image: [image registry]/[image]
        image: dannyzaken/nbimage
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 8080
        - containerPort: 8443
        - containerPort: 8444
        - containerPort: 60100
        - containerPort: 60101
        - containerPort: 60102
        - containerPort: 60103
        - containerPort: 60104
        - containerPort: 60105
        volumeMounts:
        - mountPath: /sys/fs/cgroup
          name: cgroup-volume
          readOnly: true
        - mountPath: /run
          name: run-volume
        - mountPath: /run/lock
          name: run-lock-volume
        - mountPath: /data
          name: datadir
        - mountPath: /log
          name: logdir
      volumes:
      - name: cgroup-volume
        hostPath:
          # directory location on host
          path: /sys/fs/cgroup
          # this field is optional
          type: Directory
      - name: run-volume
        emptyDir: { medium: "Memory"}
      - name: run-lock-volume
        emptyDir: { medium: "Memory"}
  volumeClaimTemplates:
  # this will provision a dynamic persistent volume (volume is automatically provisioned by a provisioner)
  # in minikube it is provisioned as hostPath volume under hosts /tmp which is not persistent between 
  # minkube restarts. if we want it to be persistent between restarts we need to statically provision a 
  # volume according to this https://kubernetes.io/docs/setup/minikube/#persistent-volumes
  - metadata:
      name: logdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 50Gi